# -*- coding: utf-8 -*-
"""Four Square Cipher

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KCWKmBdd_pA9a76deBL1jtZ6ROkBGgXJ
"""

import sys
import random

# Four Square Cipher: consists of 4 5 by 5 squares. Two of these squares are plaintext with letters a-z (excluding q and in alphabetical order) in this 5 by 5 orientation. 
# The other two squares are ciphertext squares with letters a-z (excluding q and in random order) in this 5 by 5 orientation. 
# The original word is split up into groups of two letters and then, the corresponding letters from the ciphertext squares in the same row and collun relpcae the original letters to form the encryption
def Four_Square_Cipher():
  print("\n\nFOUR SQUARE CIPHER")
  # create 2 plaintext squares
  top_left = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"]
  bottom_right = top_left[:]
  # create 2 ciphertext squares
  top_right = top_left[:]
  random.shuffle(top_right)
  bottom_left = top_left[:]
  random.shuffle(bottom_left)

  # assign rows and collumns to each letter in each list by creating a list of the coordinates
  top_left_rows_and_collumns = []
  top_right_rows_and_collumns = []
  bottom_left_rows_and_collumns = []
  bottom_right_rows_and_collumns = []

  # top left
  row = 1
  position = 0
  collumn = 0
  for char in top_left:
    # assign collumns
    collumn += 1
    if (collumn == 6):
      collumn = 1
    # assign rows
    position += 1
    if (position == 6):
      row += 1
      position = 1
    # append row and column to coordinates list
    top_left_rows_and_collumns.append(row)
    top_left_rows_and_collumns.append(collumn)

  # top right
  row = 1
  position = 0
  for char in top_right:
    # assign collumns
    collumn += 1
    if (collumn == 11):
      collumn = 6
    # assign rows
    position += 1
    if (position == 6):
      row += 1
      position = 1
    # append row and column to coordinates list
    top_right_rows_and_collumns.append(row)
    top_right_rows_and_collumns.append(collumn)

  # bottom left
  collumn = 0
  for char in bottom_left:
    # assign collumns
    collumn += 1
    if (collumn == 6):
      collumn = 1
    # assign rows
    position += 1
    if (position == 6):
      row += 1
      position = 1
    # append row and column to coordinates list
    bottom_left_rows_and_collumns.append(row)
    bottom_left_rows_and_collumns.append(collumn)

  # bottom right
  row = 5
  for char in bottom_right:
    # assign collumns
    collumn += 1
    if (collumn == 11):
      collumn = 6
    # assign rows
    position += 1
    if (position == 6):
      row += 1
      position = 1
    # append row and column to coordinates list
    bottom_right_rows_and_collumns.append(row)
    bottom_right_rows_and_collumns.append(collumn)

  # convert the rows and collumns lists into nested ones to resemble coordinates
  top_left_coordinates_list = [top_left_rows_and_collumns[i:i+2] for i in range(0, len(top_left_rows_and_collumns), 2)]
  top_right_coordinates_list = [top_right_rows_and_collumns[i:i+2] for i in range(0, len(top_right_rows_and_collumns), 2)]
  bottom_left_coordinates_list = [bottom_left_rows_and_collumns[i:i+2] for i in range(0, len(bottom_left_rows_and_collumns), 2)]
  bottom_right_coordinates_list = [bottom_right_rows_and_collumns[i:i+2] for i in range(0, len(bottom_right_rows_and_collumns), 2)]

  # get word from user
  word = input("Enter a word/phrase to be encrypted with the Four Square Cipher: ")

  # add letters from word to new word list
  # remove spaces and detect int input
  word_list = []
  for letter in word:
    word_list.append(letter.lower())
    if (letter == " "):
        word_list.remove(letter)
    elif (type(letter) == int):
      sys.exit("No valid encryption can be formed")
    # i/j
    elif (letter == "j" or letter == "J"):
      word_list.remove(letter)
      word_list.append("i")

  # if word length is odd, add random letter to the end to make the encryption accurate
  if (len(word_list) % 2 != 0):
    word_list.append("x")
  
  # replace letters of original word with letters in coreesonding row/column
  encrypted_word_list = []
  for letter1, letter2 in zip(word_list[0::2], word_list[1::2]):
    # find index of each letter in the plaintext word lists 
    letter1_index = top_left.index(letter1)
    letter2_index = bottom_right.index(letter2)
    # find row and column of letter1
    letter1_corresponding_coordinates = top_left_coordinates_list[letter1_index]
    letter1_row = letter1_corresponding_coordinates[0]
    letter1_collumn = letter1_corresponding_coordinates[1]
    # find row and column of letter1
    letter2_corresponding_coordinates = bottom_right_coordinates_list[letter2_index]
    letter2_row = letter2_corresponding_coordinates[0]
    letter2_collumn = letter2_corresponding_coordinates[1]
    # replace letter1 (top right)
    new_letter1_row = letter1_row
    new_letter1_collumn = letter2_collumn
    new_letter1_index = top_right_coordinates_list.index([new_letter1_row, new_letter1_collumn])
    new_letter1 = top_right[new_letter1_index]
    encrypted_word_list.append(new_letter1)
    # replace letter2 (bottom_left)
    new_letter2_row = letter2_row
    new_letter2_collumn = letter1_collumn
    new_letter2_index = bottom_left_coordinates_list.index([new_letter2_row, new_letter2_collumn])
    new_letter2 = bottom_left[new_letter2_index]
    encrypted_word_list.append(new_letter2)

  # convert the encrypted word list into a string and display the random keys
  random_key1 = ''.join([str(elem) for elem in top_right])
  random_key2 = ''.join([str(elem) for elem in bottom_left])
  print("Random Key 1: ", random_key1)
  print("Random Key 2: ", random_key2)
  encrypted_word = ''.join([str(elem) for elem in encrypted_word_list])
  print("The encrypted word/phrase is: ")
  print(encrypted_word)

Four_Square_Cipher()