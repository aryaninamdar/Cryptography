# -*- coding: utf-8 -*-
"""Baconian Cipher

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Fx17vsor4UGQhg8c_ls-Vf2gZrpEMeyc
"""

# Baconian Cipher: Takes each letter from original word and replaces it with a sequence of 5 letters... These 5 letters are either a's or b's
def Baconian_Cipher():
  print("\n\nBACONIAN CIPHER")
  # original alphabet list
  alphabet_list = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"]
  # binary alphabet list
  binary_alphabet_list = ['aaaaa', 'aaaab', 'aaaba', 'aaabb', 'aabaa', 'aabab', 'aabba', 'aabbb', 'abaaa', 'abaab', 'ababa', 'ababb', 'abbaa', 'abbab', 'abbba', 'abbbb', 'baaaa', 'baaab', 'baaba', 'baabb', 'babaa', 'babab', 'babba', 'babbb', 'bbaaa', 'bbaab']
  
  # take input from the user
  word = input("Enter a word/phrase to be encrypted with the Baconian Cipher: ")
  # iterate through every letter in the word
  encrypted_word_list = []
  for letter in word:
    # if there is a space
    if (letter == " "):
      # append space to new word list
      encrypted_word_list.append(" ")
    # if lowercase version of letter is present in the alphabet_list
    if (letter.lower() in alphabet_list):
      # assign the index of the lowercase version of the letter in the list to a variable called letter_index
      letter_index = alphabet_list.index(letter.lower())
      # create variable corresponding_letter which equals the letter in the reversed_alphabet_list which has the same index as the original letter in the original list
      corresponding_letter = binary_alphabet_list[letter_index]
      # if letter is uppercase
      if (letter.isupper() == True):
        # append the uppercase leter to list by using .upper()
        encrypted_word_list.append(corresponding_letter.upper())
      else:
        # append lowercase letter
        encrypted_word_list.append(corresponding_letter)

  # convert the new word list into a string
  encrypted_word = ''.join([str(elem) for elem in encrypted_word_list])
  # handle exception of no inoput or integer input
  if (encrypted_word == ""):
    print("No valid encryption can be formed")
  else:
    print("The encrypted word/phrase is: ")
    print(encrypted_word)
    
Baconian_Cipher()
